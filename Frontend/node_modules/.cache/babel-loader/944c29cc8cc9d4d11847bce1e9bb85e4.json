{"ast":null,"code":"// import { constants } from '../constants'\n// const fetch = require('node-fetch')\n// window.chartColors = {\n//   red: 'rgb(255, 99, 132)',\n//   orange: 'rgb(255, 159, 64)',\n//   yellow: 'rgb(255, 205, 86)',\n//   green: 'rgb(75, 192, 192)',\n//   blue: 'rgb(54, 162, 235)',\n//   lightBlue: 'rgb(151,187,205)',\n//   purple: 'rgb(153, 102, 255)',\n//   grey: 'rgb(201, 203, 207)'\n// }\n// const getURL = (name) => {\n//   return `https://raw.githubusercontent.com/${constants.organization}/${constants.repoName}/${constants.branch}/${\n//     constants.sourceFile[name]\n//   }`\n// }\n// const getSource = (name) => {\n//   return fetch(getURL(name)).then(response => response.text())\n// }\n// const lineChartOptions = (title) => {\n//   return {\n//     responsive: true,\n//     hoverMode: 'index',\n//     stacked: false,\n//     title: {\n//       display: true,\n//       text: title\n//     },\n//     scales: {\n//       xAxes: [{\n//         type: 'time',\n//         display: true,\n//         time: {\n//           unit: 'day',\n//           parser: 'YYYY-MM-DDTHH:mm:ss',\n//           round: 'hour',\n//           tooltipFormat: 'll HH:mm'\n//         },\n//         scaleLabel: {\n//           display: true,\n//           labelString: 'Date'\n//         },\n//         ticks: {\n//           major: {\n//             fontStyle: 'bold',\n//             fontColor: '#FF0000'\n//           }\n//         }\n//       }],\n//       yAxes: [{\n//         type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n//         display: true,\n//         position: 'left',\n//         id: 'y-axis-1'\n//       }, {\n//         type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n//         display: true,\n//         position: 'right',\n//         id: 'y-axis-2',\n//         // grid line settings\n//         gridLines: {\n//           drawOnChartArea: false // only want the grid lines for one axis to show up\n//         }\n//       }]\n//     }\n//   }\n// }\n// const lineChartWithPriceVolume = (labels, prices, volumes) => {\n//   // if (labels.length > 150) {\n//   //   labels = labels.slice(labels.length -150, labels.length -1);\n//   //   prices = prices.slice(prices.length -150, prices.length -1);\n//   //   volumes = volumes.slice(volumes.length -150, volumes.length -1);\n//   // }\n//   return {\n//     labels: labels,\n//     datasets: [\n//       {\n//         label: 'Price',\n//         borderColor: window.chartColors.red,\n//         backgroundColor: window.chartColors.red,\n//         fill: false,\n//         data: prices,\n//         yAxisID: 'y-axis-1'\n//       },\n//       {\n//         label: 'Volume',\n//         borderColor: window.chartColors.lightBlue,\n//         backgroundColor: window.chartColors.lightBlue,\n//         fill: true,\n//         data: volumes,\n//         yAxisID: 'y-axis-2'\n//       }\n//     ]\n//   }\n// }\n// const lineChartWithCloseVolume = (labels, closes, volumes) => {\n//   return {\n//     labels: labels,\n//     datasets: [\n//       {\n//         label: 'Close',\n//         borderColor: window.chartColors.red,\n//         backgroundColor: window.chartColors.red,\n//         fill: false,\n//         data: closes,\n//         yAxisID: 'y-axis-1'\n//       },\n//       {\n//         label: 'Volume',\n//         borderColor: window.chartColors.lightBlue,\n//         backgroundColor: window.chartColors.lightBlue,\n//         fill: true,\n//         data: volumes,\n//         yAxisID: 'y-axis-2'\n//       }\n//     ]\n//   }\n// }\n// const barChartOptions = (title) => {\n//   return {\n//     title: {\n//       display: true,\n//       text: title\n//     },\n//     tooltips: {\n//       mode: 'index',\n//       intersect: false\n//     },\n//     responsive: true,\n//     scales: {\n//       xAxes: [{\n//         stacked: true\n//       }],\n//       yAxes: [{\n//         stacked: true\n//       }]\n//     }\n//   }\n// }\n// const barChartWithVolumes = (volumes) => {\n//   return {\n//     labels: Object.values(volumes).map(e => e.date),\n//     datasets: [\n//       {\n//         label: 'others',\n//         backgroundColor: window.chartColors.grey,\n//         data: Object.values(volumes).map(e => {\n//           let remain = toFloat(e.volume) -\n//             toFloat(e.upbitVolume) -\n//             toFloat(e.bittrexVolume) -\n//             toFloat(e.abccVolume) -\n//             toFloat(e.kucoinVolume) -\n//             toFloat(e.coinsuperVolume)\n//           return remain > 0 ? remain : 0\n//         })\n//       },\n//       {\n//         label: 'upbit',\n//         backgroundColor: window.chartColors.red,\n//         data: Object.values(volumes).map(e => toFloat(e.upbitVolume))\n//       },\n//       {\n//         label: 'bittrex',\n//         backgroundColor: window.chartColors.green,\n//         data: Object.values(volumes).map(e => toFloat(e.bittrexVolume))\n//       },\n//       {\n//         label: 'abcc',\n//         backgroundColor: window.chartColors.blue,\n//         data: Object.values(volumes).map(e => toFloat(e.abccVolume))\n//       },\n//       {\n//         label: 'kucoin',\n//         backgroundColor: window.chartColors.orange,\n//         data: Object.values(volumes).map(e => toFloat(e.kucoinVolume))\n//       },\n//       {\n//         label: 'coinsuper',\n//         backgroundColor: window.chartColors.yellow,\n//         data: Object.values(volumes).map(e => toFloat(e.coinsuperVolume))\n//       }\n//     ]\n//   }\n// }\n// const replaceAll = (str, searchStr, replaceStr) => str.split(searchStr).join(replaceStr)\n// const fmtInt = v => v ? v.toLocaleString('en') : '0'\n// const fmtFloat = v => v ? parseFloat(Number(v).toFixed(8)).toString().replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,') : 0\n// const toFloat = v => v ? parseFloat(replaceAll(v, ',', '')) : 0\n// const numberFormat = (number, decimals, decPoint, thousandsSep) => {\n//   // http://kevin.vanzonneveld.net\n//   // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n//   // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n//   // +     bugfix by: Michael White (http://getsprink.com)\n//   // +     bugfix by: Benjamin Lupton\n//   // +     bugfix by: Allan Jensen (http://www.winternet.no)\n//   // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n//   // +     bugfix by: Howard Yeend\n//   // +    revised by: Luke Smith (http://lucassmith.name)\n//   // +     bugfix by: Diogo Resende\n//   // +     bugfix by: Rival\n//   // +      input by: Kheang Hok Chin (http://www.distantia.ca/)\n//   // +   improved by: davook\n//   // +   improved by: Brett Zamir (http://brett-zamir.me)\n//   // +      input by: Jay Klehr\n//   // +   improved by: Brett Zamir (http://brett-zamir.me)\n//   // +      input by: Amir Habibi (http://www.residence-mixte.com/)\n//   // +     bugfix by: Brett Zamir (http://brett-zamir.me)\n//   // +   improved by: Theriault\n//   // +   improved by: Drew Noakes\n//   // *     example 1: number_format(1234.56);\n//   // *     returns 1: '1,235'\n//   // *     example 2: number_format(1234.56, 2, ',', ' ');\n//   // *     returns 2: '1 234,56'\n//   // *     example 3: number_format(1234.5678, 2, '.', '');\n//   // *     returns 3: '1234.57'\n//   // *     example 4: number_format(67, 2, ',', '.');\n//   // *     returns 4: '67,00'\n//   // *     example 5: number_format(1000);\n//   // *     returns 5: '1,000'\n//   // *     example 6: number_format(67.311, 2);\n//   // *     returns 6: '67.31'\n//   // *     example 7: number_format(1000.55, 1);\n//   // *     returns 7: '1,000.6'\n//   // *     example 8: number_format(67000, 5, ',', '.');\n//   // *     returns 8: '67.000,00000'\n//   // *     example 9: number_format(0.9, 0);\n//   // *     returns 9: '1'\n//   // *    example 10: number_format('1.20', 2);\n//   // *    returns 10: '1.20'\n//   // *    example 11: number_format('1.20', 4);\n//   // *    returns 11: '1.2000'\n//   // *    example 12: number_format('1.2000', 3);\n//   // *    returns 12: '1.200'\n//   var n = !isFinite(+number) ? 0 : +number\n//   var prec = !isFinite(+decimals) ? 0 : Math.abs(decimals)\n//   var sep = (typeof thousandsSep === 'undefined') ? ',' : thousandsSep\n//   var dec = (typeof decPoint === 'undefined') ? '.' : decPoint\n//   var toFixedFix = function (n, prec) {\n//     // Fix for IE parseFloat(0.55).toFixed(0) = 0\n//     var k = Math.pow(10, prec)\n//     return Math.round(n * k) / k\n//   }\n//   var s = (prec ? toFixedFix(n, prec) : Math.round(n)).toString().split('.')\n//   if (s[0].length > 3) {\n//     s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep)\n//   }\n//   if ((s[1] || '').length < prec) {\n//     s[1] = s[1] || ''\n//     s[1] += new Array(prec - s[1].length + 1).join('0')\n//   }\n//   return s.join(dec)\n// }\n// const getMarketDataCSV = e => {\n//   return {\n//     category: e.market,\n//     usdPrice: fmtFloat(e.quote.USD.price),\n//     usdVolume: fmtFloat(e.quote.USD.volume_24h),\n//     usdMarketCap: e.quote.USD.market_cap,\n//     ethPrice: fmtFloat(e.quote.ETH.price),\n//     ethVolume: fmtFloat(e.quote.ETH.volume_24h),\n//     ethMarketCap: e.quote.ETH.market_cap,\n//     btcPrice: fmtFloat(e.quote.BTC.price),\n//     btcVolume: fmtFloat(e.quote.BTC.volume_24h),\n//     btcMarketCap: e.quote.BTC.market_cap,\n//     time: e.time\n//   }\n// }\n// const getOhlcvCSV = (e, md) => {\n//   let targetTime = Date.parse(e.ctime)\n//   var ret = {\n//     ctime: e.ctime,\n//     date: e.ctime.split('T')[0],\n//     unit: e.convert,\n//     open: fmtFloat(e.quote.open),\n//     high: fmtFloat(e.quote.high),\n//     low: fmtFloat(e.quote.low),\n//     close: fmtFloat(e.quote.close),\n//     volume: fmtInt(e.quote.volume)\n//   }\n//   let capFound = md['CMC'].filter(v => Date.parse(v.time) <= targetTime)\n//   if (capFound && capFound.length) ret.marketCap = fmtFloat(capFound[0][e.convert.toLowerCase() + 'MarketCap'])\n//   constants.target.markets.forEach(market => {\n//     let found = md[market].filter(v => Date.parse(v.time) <= targetTime)\n//     if (found && found.length) ret[market + 'Volume'] = found[0][e.convert.toLowerCase() + 'Volume']\n//   })\n//   return ret\n// }\n// const getBalanceCSV = e => {\n//   return {\n//     time: e.time,\n//     exchange: e.exchange,\n//     meta: numberFormat(e.meta, 8),\n//     eth: numberFormat(e.eth, 8),\n//     btc: numberFormat(e.btc, 8),\n//     amount: numberFormat(e.amount, 8)\n//   }\n// }\n// export {\n//   getURL,\n//   getSource,\n//   fmtFloat,\n//   lineChartOptions,\n//   lineChartWithPriceVolume,\n//   lineChartWithCloseVolume,\n//   barChartOptions,\n//   barChartWithVolumes,\n//   getMarketDataCSV,\n//   getOhlcvCSV,\n//   getBalanceCSV\n// }","map":{"version":3,"sources":["/home/nineleaps/Sattebaaz/src/util/util.js"],"names":[],"mappingssourcesContent":["// import { constants } from '../constants'\n\n// const fetch = require('node-fetch')\n\n// window.chartColors = {\n//   red: 'rgb(255, 99, 132)',\n//   orange: 'rgb(255, 159, 64)',\n//   yellow: 'rgb(255, 205, 86)',\n//   green: 'rgb(75, 192, 192)',\n//   blue: 'rgb(54, 162, 235)',\n//   lightBlue: 'rgb(151,187,205)',\n//   purple: 'rgb(153, 102, 255)',\n//   grey: 'rgb(201, 203, 207)'\n// }\n\n// const getURL = (name) => {\n//   return `https://raw.githubusercontent.com/${constants.organization}/${constants.repoName}/${constants.branch}/${\n//     constants.sourceFile[name]\n//   }`\n// }\n\n// const getSource = (name) => {\n//   return fetch(getURL(name)).then(response => response.text())\n// }\n\n// const lineChartOptions = (title) => {\n//   return {\n//     responsive: true,\n//     hoverMode: 'index',\n//     stacked: false,\n//     title: {\n//       display: true,\n//       text: title\n//     },\n//     scales: {\n//       xAxes: [{\n//         type: 'time',\n//         display: true,\n//         time: {\n//           unit: 'day',\n//           parser: 'YYYY-MM-DDTHH:mm:ss',\n//           round: 'hour',\n//           tooltipFormat: 'll HH:mm'\n//         },\n//         scaleLabel: {\n//           display: true,\n//           labelString: 'Date'\n//         },\n//         ticks: {\n//           major: {\n//             fontStyle: 'bold',\n//             fontColor: '#FF0000'\n//           }\n//         }\n//       }],\n//       yAxes: [{\n//         type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n//         display: true,\n//         position: 'left',\n//         id: 'y-axis-1'\n//       }, {\n//         type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n//         display: true,\n//         position: 'right',\n//         id: 'y-axis-2',\n//         // grid line settings\n//         gridLines: {\n//           drawOnChartArea: false // only want the grid lines for one axis to show up\n//         }\n//       }]\n//     }\n//   }\n// }\n\n// const lineChartWithPriceVolume = (labels, prices, volumes) => {\n//   // if (labels.length > 150) {\n//   //   labels = labels.slice(labels.length -150, labels.length -1);\n//   //   prices = prices.slice(prices.length -150, prices.length -1);\n//   //   volumes = volumes.slice(volumes.length -150, volumes.length -1);\n//   // }\n//   return {\n//     labels: labels,\n//     datasets: [\n//       {\n//         label: 'Price',\n//         borderColor: window.chartColors.red,\n//         backgroundColor: window.chartColors.red,\n//         fill: false,\n//         data: prices,\n//         yAxisID: 'y-axis-1'\n//       },\n//       {\n//         label: 'Volume',\n//         borderColor: window.chartColors.lightBlue,\n//         backgroundColor: window.chartColors.lightBlue,\n//         fill: true,\n//         data: volumes,\n//         yAxisID: 'y-axis-2'\n//       }\n//     ]\n//   }\n// }\n\n// const lineChartWithCloseVolume = (labels, closes, volumes) => {\n//   return {\n//     labels: labels,\n//     datasets: [\n//       {\n//         label: 'Close',\n//         borderColor: window.chartColors.red,\n//         backgroundColor: window.chartColors.red,\n//         fill: false,\n//         data: closes,\n//         yAxisID: 'y-axis-1'\n//       },\n//       {\n//         label: 'Volume',\n//         borderColor: window.chartColors.lightBlue,\n//         backgroundColor: window.chartColors.lightBlue,\n//         fill: true,\n//         data: volumes,\n//         yAxisID: 'y-axis-2'\n//       }\n//     ]\n//   }\n// }\n\n// const barChartOptions = (title) => {\n//   return {\n//     title: {\n//       display: true,\n//       text: title\n//     },\n//     tooltips: {\n//       mode: 'index',\n//       intersect: false\n//     },\n//     responsive: true,\n//     scales: {\n//       xAxes: [{\n//         stacked: true\n//       }],\n//       yAxes: [{\n//         stacked: true\n//       }]\n//     }\n//   }\n// }\n\n// const barChartWithVolumes = (volumes) => {\n//   return {\n//     labels: Object.values(volumes).map(e => e.date),\n//     datasets: [\n//       {\n//         label: 'others',\n//         backgroundColor: window.chartColors.grey,\n//         data: Object.values(volumes).map(e => {\n//           let remain = toFloat(e.volume) -\n//             toFloat(e.upbitVolume) -\n//             toFloat(e.bittrexVolume) -\n//             toFloat(e.abccVolume) -\n//             toFloat(e.kucoinVolume) -\n//             toFloat(e.coinsuperVolume)\n//           return remain > 0 ? remain : 0\n//         })\n//       },\n//       {\n//         label: 'upbit',\n//         backgroundColor: window.chartColors.red,\n//         data: Object.values(volumes).map(e => toFloat(e.upbitVolume))\n//       },\n//       {\n//         label: 'bittrex',\n//         backgroundColor: window.chartColors.green,\n//         data: Object.values(volumes).map(e => toFloat(e.bittrexVolume))\n//       },\n//       {\n//         label: 'abcc',\n//         backgroundColor: window.chartColors.blue,\n//         data: Object.values(volumes).map(e => toFloat(e.abccVolume))\n//       },\n//       {\n//         label: 'kucoin',\n//         backgroundColor: window.chartColors.orange,\n//         data: Object.values(volumes).map(e => toFloat(e.kucoinVolume))\n//       },\n//       {\n//         label: 'coinsuper',\n//         backgroundColor: window.chartColors.yellow,\n//         data: Object.values(volumes).map(e => toFloat(e.coinsuperVolume))\n//       }\n//     ]\n//   }\n// }\n\n// const replaceAll = (str, searchStr, replaceStr) => str.split(searchStr).join(replaceStr)\n// const fmtInt = v => v ? v.toLocaleString('en') : '0'\n// const fmtFloat = v => v ? parseFloat(Number(v).toFixed(8)).toString().replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,') : 0\n// const toFloat = v => v ? parseFloat(replaceAll(v, ',', '')) : 0\n\n// const numberFormat = (number, decimals, decPoint, thousandsSep) => {\n//   // http://kevin.vanzonneveld.net\n//   // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n//   // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n//   // +     bugfix by: Michael White (http://getsprink.com)\n//   // +     bugfix by: Benjamin Lupton\n//   // +     bugfix by: Allan Jensen (http://www.winternet.no)\n//   // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n//   // +     bugfix by: Howard Yeend\n//   // +    revised by: Luke Smith (http://lucassmith.name)\n//   // +     bugfix by: Diogo Resende\n//   // +     bugfix by: Rival\n//   // +      input by: Kheang Hok Chin (http://www.distantia.ca/)\n//   // +   improved by: davook\n//   // +   improved by: Brett Zamir (http://brett-zamir.me)\n//   // +      input by: Jay Klehr\n//   // +   improved by: Brett Zamir (http://brett-zamir.me)\n//   // +      input by: Amir Habibi (http://www.residence-mixte.com/)\n//   // +     bugfix by: Brett Zamir (http://brett-zamir.me)\n//   // +   improved by: Theriault\n//   // +   improved by: Drew Noakes\n//   // *     example 1: number_format(1234.56);\n//   // *     returns 1: '1,235'\n//   // *     example 2: number_format(1234.56, 2, ',', ' ');\n//   // *     returns 2: '1 234,56'\n//   // *     example 3: number_format(1234.5678, 2, '.', '');\n//   // *     returns 3: '1234.57'\n//   // *     example 4: number_format(67, 2, ',', '.');\n//   // *     returns 4: '67,00'\n//   // *     example 5: number_format(1000);\n//   // *     returns 5: '1,000'\n//   // *     example 6: number_format(67.311, 2);\n//   // *     returns 6: '67.31'\n//   // *     example 7: number_format(1000.55, 1);\n//   // *     returns 7: '1,000.6'\n//   // *     example 8: number_format(67000, 5, ',', '.');\n//   // *     returns 8: '67.000,00000'\n//   // *     example 9: number_format(0.9, 0);\n//   // *     returns 9: '1'\n//   // *    example 10: number_format('1.20', 2);\n//   // *    returns 10: '1.20'\n//   // *    example 11: number_format('1.20', 4);\n//   // *    returns 11: '1.2000'\n//   // *    example 12: number_format('1.2000', 3);\n//   // *    returns 12: '1.200'\n//   var n = !isFinite(+number) ? 0 : +number\n//   var prec = !isFinite(+decimals) ? 0 : Math.abs(decimals)\n//   var sep = (typeof thousandsSep === 'undefined') ? ',' : thousandsSep\n//   var dec = (typeof decPoint === 'undefined') ? '.' : decPoint\n\n//   var toFixedFix = function (n, prec) {\n//     // Fix for IE parseFloat(0.55).toFixed(0) = 0\n//     var k = Math.pow(10, prec)\n//     return Math.round(n * k) / k\n//   }\n\n//   var s = (prec ? toFixedFix(n, prec) : Math.round(n)).toString().split('.')\n//   if (s[0].length > 3) {\n//     s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep)\n//   }\n//   if ((s[1] || '').length < prec) {\n//     s[1] = s[1] || ''\n//     s[1] += new Array(prec - s[1].length + 1).join('0')\n//   }\n//   return s.join(dec)\n// }\n\n// const getMarketDataCSV = e => {\n//   return {\n//     category: e.market,\n//     usdPrice: fmtFloat(e.quote.USD.price),\n//     usdVolume: fmtFloat(e.quote.USD.volume_24h),\n//     usdMarketCap: e.quote.USD.market_cap,\n//     ethPrice: fmtFloat(e.quote.ETH.price),\n//     ethVolume: fmtFloat(e.quote.ETH.volume_24h),\n//     ethMarketCap: e.quote.ETH.market_cap,\n//     btcPrice: fmtFloat(e.quote.BTC.price),\n//     btcVolume: fmtFloat(e.quote.BTC.volume_24h),\n//     btcMarketCap: e.quote.BTC.market_cap,\n//     time: e.time\n//   }\n// }\n\n// const getOhlcvCSV = (e, md) => {\n//   let targetTime = Date.parse(e.ctime)\n//   var ret = {\n//     ctime: e.ctime,\n//     date: e.ctime.split('T')[0],\n//     unit: e.convert,\n//     open: fmtFloat(e.quote.open),\n//     high: fmtFloat(e.quote.high),\n//     low: fmtFloat(e.quote.low),\n//     close: fmtFloat(e.quote.close),\n//     volume: fmtInt(e.quote.volume)\n//   }\n//   let capFound = md['CMC'].filter(v => Date.parse(v.time) <= targetTime)\n//   if (capFound && capFound.length) ret.marketCap = fmtFloat(capFound[0][e.convert.toLowerCase() + 'MarketCap'])\n\n//   constants.target.markets.forEach(market => {\n//     let found = md[market].filter(v => Date.parse(v.time) <= targetTime)\n//     if (found && found.length) ret[market + 'Volume'] = found[0][e.convert.toLowerCase() + 'Volume']\n//   })\n//   return ret\n// }\n\n// const getBalanceCSV = e => {\n//   return {\n//     time: e.time,\n//     exchange: e.exchange,\n//     meta: numberFormat(e.meta, 8),\n//     eth: numberFormat(e.eth, 8),\n//     btc: numberFormat(e.btc, 8),\n//     amount: numberFormat(e.amount, 8)\n//   }\n// }\n\n// export {\n//   getURL,\n//   getSource,\n//   fmtFloat,\n//   lineChartOptions,\n//   lineChartWithPriceVolume,\n//   lineChartWithCloseVolume,\n//   barChartOptions,\n//   barChartWithVolumes,\n//   getMarketDataCSV,\n//   getOhlcvCSV,\n//   getBalanceCSV\n// }\n"]},"metadata":{},"sourceType":"module"}